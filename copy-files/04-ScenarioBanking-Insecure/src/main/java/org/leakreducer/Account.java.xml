<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="Prog.java"><package>package <name><name>org</name><operator>.</operator><name>leakreducer</name></name>;</package>

<class><specifier>public</specifier> class <name>Account</name> <block>{

    <decl_stmt><decl><type><name>double</name></type> <name>balance</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ErrorLog</name></type> <name>errorLog</name> <init>= <expr><operator>new</operator> <call><name>ErrorLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TransactionLog</name></type> <name>transactionLog</name> <init>= <expr><operator>new</operator> <call><name>TransactionLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>deposit</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>amount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>balance</name></name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>logTransaction</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>logError</name></name><argument_list>(<argument><expr><literal type="string">"Cannot deposit a non-positive amount."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>withdraw</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>amount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>newAmount</name> <init>= <expr><name><name>this</name><operator>.</operator><name>balance</name></name> <operator>-</operator> <name>amount</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>newAmount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>balance</name></name> <operator>=</operator> <name>newAmount</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>logTransaction</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>logError</name></name><argument_list>(<argument><expr><literal type="string">"Account has insufficient funds to withdraw "</literal> <operator>+</operator> <name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>logError</name></name><argument_list>(<argument><expr><literal type="string">"Cannot withdraw a non-positive amount."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>logTransaction</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isDeposit</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>transaction</name> <init>= <expr><ternary><condition><expr><name>isDeposit</name></expr> ?</condition><then> <expr><literal type="string">"Deposit"</literal></expr> </then><else>: <expr><literal type="string">"Withdrawal"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>transactionLog</name><operator>.</operator><name>logTransaction</name></name><argument_list>(<argument><expr><name>transaction</name> <operator>+</operator> <literal type="string">" completed, new balance: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>balance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>logError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>errorLog</name><operator>.</operator><name>logError</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
